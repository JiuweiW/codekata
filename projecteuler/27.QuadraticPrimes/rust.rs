fn main() {
    let limit = 9999;
    let mut sieve = vec![0; limit as usize];
    let sieve_b = vec![3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];

    for i in 1..limit{
        let index = i as usize;
        if sieve[index] == 0 {
            let mut j: usize = 2 * index * (index + 1);
            while j < limit as usize{
                sieve[j] = 1;
                j = j + 2 * index + 1;
            }
        }
    }

    let mut tmp_length = 1;
    let mut tmp_a = 0;
    let mut tmp_b = 0;

    let mut a = -999;
    while a < 1000 {
        for b in 0..sieve_b.len() {
            let mut k = 1;
            loop {
                let current = k * k + a * k + sieve_b[b];
                let key = (current - 1) / 2;
                if current > 2 && sieve[key as usize] == 0 {
                    k += 1;
                } else {
                    if k > tmp_length {
                        tmp_length = k;
                        tmp_a = a;
                        tmp_b = sieve_b[b];
                    }
                    break;
                }
            }           
        }
        a += 2;
    }

    println!("{}", tmp_a * tmp_b);
}
